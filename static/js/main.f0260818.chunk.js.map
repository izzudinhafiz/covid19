{"version":3,"sources":["components/Cards/Cards.module.css","components/Cards/Cards.jsx","api/index.js","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.jsx","App.js","index.js","components/Chart/Chart.module.css","App.module.css"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","displayData","value","Date","toDateString","className","styles","container","Grid","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","duration","separator","url","fetchData","country","a","dynamicURL","axios","get","fetchDailyData","modifiedData","map","total","date","reportDate","fetchCountryData","countries","name","Chart","useState","dailyData","setDailyData","useEffect","fetchAPI","lineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","barChart","options","legend","display","title","text","CountryPicker","handleCountryChange","setCountries","fetchCountries","console","log","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","key","App","state","fetchedData","setState","this","React","Component","ReactDOM","render","document","getElementById"],"mappings":"oHACAA,EAAOC,QAAU,CAAC,UAAY,yBAAyB,KAAO,oBAAoB,SAAW,wBAAwB,UAAY,yBAAyB,OAAS,wB,4NCsEpJC,EAhED,SAAC,GAA4D,IAAD,IAAzDC,KAAQC,EAAiD,EAAjDA,UAAWC,EAAsC,EAAtCA,UAAWC,EAA2B,EAA3BA,OAAQC,EAAmB,EAAnBA,WAC/CC,EAAc,CAClBJ,YACAC,YACAC,SACAC,cAeF,OAZKH,GAMHI,EAAYJ,UAAYA,EAAUK,MAClCD,EAAYH,UAAYA,EAAUI,MAClCD,EAAYF,OAASA,EAAOG,MAC5BD,EAAYD,WAAa,IAAIG,KAAKH,GAAYI,iBAR9CH,EAAYJ,UAAY,EACxBI,EAAYH,UAAY,EACxBG,EAAYF,OAAS,EACrBE,EAAYD,YAAa,IAAIG,MAAOC,gBASpC,yBAAKC,UAAWC,IAAOC,WACrB,kBAACC,EAAA,EAAD,CAAMD,WAAS,EAACE,QAAQ,UACtB,kBAACD,EAAA,EAAD,CAAME,MAAI,EAACC,UAAWC,IAAMC,GAAI,GAAIC,GAAI,EAAGT,UAAWU,IAAGT,IAAOU,KAAMV,IAAOW,WAC3E,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,MAAM,gBAAgBC,cAAY,GAA9C,YAGA,kBAACF,EAAA,EAAD,CAAYG,QAAQ,MAClB,kBAAC,IAAD,CAASC,MAAO,EAAGC,IAAKvB,EAAYJ,UAAW4B,SAAU,GAAKC,UAAU,OAE1E,kBAACP,EAAA,EAAD,CAAYC,MAAM,iBAAlB,YAA4CnB,EAAYD,YACxD,kBAACmB,EAAA,EAAD,CAAYG,QAAQ,SAApB,oCAGJ,kBAACd,EAAA,EAAD,CAAME,MAAI,EAACC,UAAWC,IAAMC,GAAI,GAAIC,GAAI,EAAGT,UAAWU,IAAGT,IAAOU,KAAMV,IAAOR,YAC3E,kBAACoB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,MAAM,gBAAgBC,cAAY,GAA9C,aAGA,kBAACF,EAAA,EAAD,CAAYG,QAAQ,MAClB,kBAAC,IAAD,CAASC,MAAO,EAAGC,IAAKvB,EAAYH,UAAW2B,SAAU,GAAKC,UAAU,OAE1E,kBAACP,EAAA,EAAD,CAAYC,MAAM,iBAAlB,YAA4CnB,EAAYD,YACxD,kBAACmB,EAAA,EAAD,CAAYG,QAAQ,SAApB,wCAGJ,kBAACd,EAAA,EAAD,CAAME,MAAI,EAACC,UAAWC,IAAMC,GAAI,GAAIC,GAAI,EAAGT,UAAWU,IAAGT,IAAOU,KAAMV,IAAOP,SAC3E,kBAACmB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,MAAM,gBAAgBC,cAAY,GAA9C,UAGA,kBAACF,EAAA,EAAD,CAAYG,QAAQ,MAClB,kBAAC,IAAD,CAASC,MAAO,EAAGC,IAAKvB,EAAYF,OAAQ0B,SAAU,GAAKC,UAAU,OAEvE,kBAACP,EAAA,EAAD,CAAYC,MAAM,iBAAlB,YAA4CnB,EAAYD,YACxD,kBAACmB,EAAA,EAAD,CAAYG,QAAQ,SAApB,yC,yBC7DNK,EAAM,iCAECC,EAAS,uCAAG,WAAOC,GAAP,2BAAAC,EAAA,6DACnBC,EAAaJ,EAED,WAAZE,GAAwBA,IAC1BE,EAAU,UAAMJ,EAAN,sBAAuBE,IAJZ,kBAoBXG,IAAMC,IAAIF,GApBC,2BAmBnBnC,KAAQC,EAnBW,EAmBXA,UAAWC,EAnBA,EAmBAA,UAAWC,EAnBX,EAmBWA,OAAQC,EAnBnB,EAmBmBA,WAnBnB,kBAsBd,CAAEH,YAAWC,YAAWC,SAAQC,eAtBlB,4FAAH,sDA0BTkC,EAAc,uCAAG,gCAAAJ,EAAA,+EAEHE,IAAMC,IAAN,UAAaN,EAAb,WAFG,uBAElB/B,EAFkB,EAElBA,KACFuC,EAAevC,EAAKwC,KAAI,SAACxC,GAAD,MAAW,CACvCC,UAAWD,EAAKC,UAAUwC,MAC1BtC,OAAQH,EAAKG,OAAOsC,MACpBC,KAAM1C,EAAK2C,eANa,kBAQnBJ,GARmB,yFAAH,qDAYdK,EAAgB,uCAAG,gCAAAV,EAAA,+EAIlBE,IAAMC,IAAN,UAAaN,EAAb,eAJkB,uBAGlBc,EAHkB,EAG1B7C,KAAQ6C,UAGJN,EAAeM,EAAUL,KAAI,SAACP,GAAD,OAAaA,EAAQa,QAN5B,kBAQrBP,GARqB,yFAAH,qD,yBCmBdQ,EAvDD,SAAC,GAAuB,IAArB/C,EAAoB,EAApBA,KAAMiC,EAAc,EAAdA,QAAc,EACDe,mBAAS,IADR,mBAC5BC,EAD4B,KACjBC,EADiB,KAGnCC,qBAAU,YACM,uCAAG,sBAAAjB,EAAA,kEACfgB,EADe,SACIZ,IADJ,6EAAH,qDAIdc,KACC,IAEH,IAAMC,EAAYJ,EAAUK,OAC1B,kBAAC,IAAD,CACEtD,KAAM,CACJuD,OAAQN,EAAUT,KAAI,qBAAGE,QACzBc,SAAU,CACR,CACExD,KAAMiD,EAAUT,KAAI,qBAAGvC,aACvBwD,MAAO,WACPC,YAAa,UACbC,MAAM,GAER,CACE3D,KAAMiD,EAAUT,KAAI,qBAAGrC,UACvBsD,MAAO,SACPC,YAAa,MACbE,gBAAiB,uBACjBD,MAAM,OAKZ,KAEEE,EAAW7D,EAAKC,UACpB,kBAAC,IAAD,CACED,KAAM,CACJuD,OAAQ,CAAC,WAAY,YAAa,UAClCC,SAAU,CACR,CACEC,MAAO,SACPG,gBAAiB,CAAC,uBAAwB,uBAAwB,wBAClE5D,KAAM,CAACA,EAAKC,UAAUK,MAAON,EAAKE,UAAUI,MAAON,EAAKG,OAAOG,UAIrEwD,QAAS,CACPC,OAAQ,CAAEC,SAAS,EAAOC,MAAO,CAAED,SAAS,EAAME,KAAK,oBAAD,OAAsBjC,QAG9E,KAEJ,OAAO,yBAAKxB,UAAWC,IAAOC,WAAYsB,GAAuB,WAAZA,EAAuB4B,EAAWR,I,mCCxB1Ec,EA5BO,SAAC,GAA6B,IAA3BC,EAA0B,EAA1BA,oBAA0B,EACfpB,mBAAS,IADM,mBAC1CH,EAD0C,KAC/BwB,EAD+B,KAYjD,OATAlB,qBAAU,YACY,uCAAG,sBAAAjB,EAAA,kEACrBmC,EADqB,SACFzB,IADE,6EAAH,qDAIpB0B,GACAC,QAAQC,IAAI3B,KACX,IAGD,kBAAC4B,EAAA,EAAD,CAAahE,UAAWC,IAAOgE,aAC7B,kBAACC,EAAA,EAAD,CAAcC,aAAa,GAAGC,SAAU,SAACC,GAAD,OAAOV,EAAoBU,EAAEC,OAAOzE,SAC1E,4BAAQA,MAAM,UAAd,UACCuC,EACGA,EAAUL,KAAI,SAACP,GAAD,OACZ,4BAAQ+C,IAAK/C,EAAS3B,MAAO2B,GAC1BA,MAGL,Q,iBCMGgD,E,4MA3BbC,MAAQ,CACNlF,KAAM,GACNiC,QAAS,I,EAQXmC,oB,uCAAsB,WAAOnC,GAAP,eAAAC,EAAA,sEACMF,EAAUC,GADhB,OACdkD,EADc,OAEpBZ,QAAQC,IAAIW,GACZ,EAAKC,SAAS,CAAEpF,KAAMmF,EAAalD,QAASA,IAHxB,2C,wPAJMD,I,OAApBmD,E,OACNE,KAAKD,SAAS,CAAEpF,KAAMmF,I,qIAUtB,OACE,yBAAK1E,UAAWC,IAAOC,WACrB,kBAAC,EAAD,CAAOX,KAAMqF,KAAKH,MAAMlF,OACxB,kBAAC,EAAD,CAAeoE,oBAAqBiB,KAAKjB,sBACzC,kBAAC,EAAD,CAAOpE,KAAMqF,KAAKH,MAAMlF,KAAMiC,QAASoD,KAAKH,MAAMjD,e,GAtBxCqD,IAAMC,WCDxBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U,mBCJjD9F,EAAOC,QAAU,CAAC,UAAY,2B,wCCA9BD,EAAOC,QAAU,CAAC,UAAY,yB","file":"static/js/main.f0260818.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__3b3I5\",\"card\":\"Cards_card__3LkJT\",\"infected\":\"Cards_infected__MaZs5\",\"recovered\":\"Cards_recovered__2EChl\",\"deaths\":\"Cards_deaths__guyns\"};","import React from \"react\";\r\nimport { Card, CardContent, Typography, Grid } from \"@material-ui/core\";\r\nimport CountUp from \"react-countup\";\r\nimport cx from \"classnames\";\r\n\r\nimport styles from \"./Cards.module.css\";\r\n\r\nconst Cards = ({ data: { confirmed, recovered, deaths, lastUpdate } }) => {\r\n  const displayData = {\r\n    confirmed,\r\n    recovered,\r\n    deaths,\r\n    lastUpdate,\r\n  };\r\n\r\n  if (!confirmed) {\r\n    displayData.confirmed = 0;\r\n    displayData.recovered = 0;\r\n    displayData.deaths = 0;\r\n    displayData.lastUpdate = new Date().toDateString();\r\n  } else {\r\n    displayData.confirmed = confirmed.value;\r\n    displayData.recovered = recovered.value;\r\n    displayData.deaths = deaths.value;\r\n    displayData.lastUpdate = new Date(lastUpdate).toDateString();\r\n  }\r\n\r\n  return (\r\n    <div className={styles.container}>\r\n      <Grid container justify=\"center\">\r\n        <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.infected)}>\r\n          <CardContent>\r\n            <Typography color=\"textSecondary\" gutterBottom>\r\n              Infected\r\n            </Typography>\r\n            <Typography variant=\"h5\">\r\n              <CountUp start={0} end={displayData.confirmed} duration={0.5} separator=\",\" />\r\n            </Typography>\r\n            <Typography color=\"textSecondary\">Updated: {displayData.lastUpdate}</Typography>\r\n            <Typography variant=\"body2\">Number of total COVID-19 cases</Typography>\r\n          </CardContent>\r\n        </Grid>\r\n        <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.recovered)}>\r\n          <CardContent>\r\n            <Typography color=\"textSecondary\" gutterBottom>\r\n              Recovered\r\n            </Typography>\r\n            <Typography variant=\"h5\">\r\n              <CountUp start={0} end={displayData.recovered} duration={0.5} separator=\",\" />\r\n            </Typography>\r\n            <Typography color=\"textSecondary\">Updated: {displayData.lastUpdate}</Typography>\r\n            <Typography variant=\"body2\">Number of recovered COVID-19 cases</Typography>\r\n          </CardContent>\r\n        </Grid>\r\n        <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.deaths)}>\r\n          <CardContent>\r\n            <Typography color=\"textSecondary\" gutterBottom>\r\n              Deaths\r\n            </Typography>\r\n            <Typography variant=\"h5\">\r\n              <CountUp start={0} end={displayData.deaths} duration={0.5} separator=\",\" />\r\n            </Typography>\r\n            <Typography color=\"textSecondary\">Updated: {displayData.lastUpdate}</Typography>\r\n            <Typography variant=\"body2\">Number of deaths due to COVID-19</Typography>\r\n          </CardContent>\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Cards;\r\n","import axios from \"axios\";\r\n\r\nconst url = \"https://covid19.mathdro.id/api\";\r\n\r\nexport const fetchData = async (country) => {\r\n  let dynamicURL = url;\r\n\r\n  if (country !== \"Global\" && country) {\r\n    dynamicURL = `${url}/countries/${country}`;\r\n  }\r\n\r\n  try {\r\n    // const { data } = await axios.get(url);\r\n\r\n    // const modifiedData = {\r\n    //   confirmed: data.confirmed,\r\n    //   recovered: data.recovered,\r\n    //   deaths: data.deaths,\r\n    //   lastUpdate: data.lastUpdate,\r\n    // };\r\n    // return modifiedData;\r\n\r\n    const {\r\n      data: { confirmed, recovered, deaths, lastUpdate },\r\n    } = await axios.get(dynamicURL);\r\n\r\n    return { confirmed, recovered, deaths, lastUpdate };\r\n  } catch (error) {}\r\n};\r\n\r\nexport const fetchDailyData = async () => {\r\n  try {\r\n    const { data } = await axios.get(`${url}/daily`);\r\n    const modifiedData = data.map((data) => ({\r\n      confirmed: data.confirmed.total,\r\n      deaths: data.deaths.total,\r\n      date: data.reportDate,\r\n    }));\r\n    return modifiedData;\r\n  } catch (error) {}\r\n};\r\n\r\nexport const fetchCountryData = async () => {\r\n  try {\r\n    const {\r\n      data: { countries },\r\n    } = await axios.get(`${url}/countries`);\r\n\r\n    const modifiedData = countries.map((country) => country.name);\r\n\r\n    return modifiedData;\r\n  } catch (error) {}\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { fetchDailyData } from \"../../api\";\r\nimport { Line, Bar } from \"react-chartjs-2\";\r\n\r\nimport styles from \"./Chart.module.css\";\r\n\r\nconst Chart = ({ data, country }) => {\r\n  const [dailyData, setDailyData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchAPI = async () => {\r\n      setDailyData(await fetchDailyData());\r\n    };\r\n\r\n    fetchAPI();\r\n  }, []);\r\n\r\n  const lineChart = dailyData.length ? (\r\n    <Line\r\n      data={{\r\n        labels: dailyData.map(({ date }) => date),\r\n        datasets: [\r\n          {\r\n            data: dailyData.map(({ confirmed }) => confirmed),\r\n            label: \"Infected\",\r\n            borderColor: \"#3333ff\",\r\n            fill: true,\r\n          },\r\n          {\r\n            data: dailyData.map(({ deaths }) => deaths),\r\n            label: \"Deaths\",\r\n            borderColor: \"red\",\r\n            backgroundColor: \"rgba(255, 0, 0, 0.5)\",\r\n            fill: true,\r\n          },\r\n        ],\r\n      }}\r\n    />\r\n  ) : null;\r\n\r\n  const barChart = data.confirmed ? (\r\n    <Bar\r\n      data={{\r\n        labels: [\"Infected\", \"Recovered\", \"Deaths\"],\r\n        datasets: [\r\n          {\r\n            label: \"People\",\r\n            backgroundColor: [\"rgba(0, 0, 255, 0.5)\", \"rgba(0, 255, 0, 0.5)\", \"rgba(255, 0, 0, 0.5)\"],\r\n            data: [data.confirmed.value, data.recovered.value, data.deaths.value],\r\n          },\r\n        ],\r\n      }}\r\n      options={{\r\n        legend: { display: false, title: { display: true, text: `Current State in ${country}` } },\r\n      }}\r\n    />\r\n  ) : null;\r\n\r\n  return <div className={styles.container}>{country && country !== \"Global\" ? barChart : lineChart}</div>;\r\n};\r\n\r\nexport default Chart;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { FormControl, NativeSelect } from \"@material-ui/core\";\r\n\r\nimport { fetchCountryData } from \"../../api\";\r\nimport styles from \"./CountryPicker.module.css\";\r\n\r\nconst CountryPicker = ({ handleCountryChange }) => {\r\n  const [countries, setCountries] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchCountries = async () => {\r\n      setCountries(await fetchCountryData());\r\n    };\r\n\r\n    fetchCountries();\r\n    console.log(countries);\r\n  }, []);\r\n\r\n  return (\r\n    <FormControl className={styles.formControl}>\r\n      <NativeSelect defaultValue=\"\" onChange={(e) => handleCountryChange(e.target.value)}>\r\n        <option value=\"Global\">Global</option>\r\n        {countries\r\n          ? countries.map((country) => (\r\n              <option key={country} value={country}>\r\n                {country}\r\n              </option>\r\n            ))\r\n          : null}\r\n      </NativeSelect>\r\n    </FormControl>\r\n  );\r\n};\r\n\r\nexport default CountryPicker;\r\n","import React from \"react\";\r\n\r\nimport { Cards, Chart, CountryPicker } from \"./components\";\r\nimport styles from \"./App.module.css\";\r\nimport { fetchData } from \"./api\";\r\n\r\nclass App extends React.Component {\r\n  state = {\r\n    data: {},\r\n    country: \"\",\r\n  };\r\n\r\n  async componentDidMount() {\r\n    const fetchedData = await fetchData();\r\n    this.setState({ data: fetchedData });\r\n  }\r\n\r\n  handleCountryChange = async (country) => {\r\n    const fetchedData = await fetchData(country);\r\n    console.log(fetchedData);\r\n    this.setState({ data: fetchedData, country: country });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className={styles.container}>\r\n        <Cards data={this.state.data} />\r\n        <CountryPicker handleCountryChange={this.handleCountryChange} />\r\n        <Chart data={this.state.data} country={this.state.country} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__31DQU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__2XUGd\"};"],"sourceRoot":""}