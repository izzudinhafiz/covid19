{"version":3,"sources":["components/Cards/Cards.jsx","components/Chart/Chart.jsx","api/index.js","components/CountryPicker/CountryPicker.jsx","App.js","index.js","components/Cards/Cards.module.css","components/Chart/Chart.module.css","App.module.css"],"names":["Cards","data","confirmed","recovered","deaths","lastUpdate","timeSeries","lastData","length","secondLast","displayData","deltaData","Date","date","toDateString","className","styles","container","Grid","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","counter","variant","start","end","duration","separator","confirmedDelta","recoveredDelta","deathsDelta","Chart","country","dailyData","lineChart","labels","map","datasets","label","borderColor","fill","backgroundColor","globalUrl","fetchTotalData","a","axios","get","result","Object","keys","console","log","fetchDailyData","fetchURL","modifiedData","key","index","filter","fetchCountryData","countries","name","iso","iso3","CountryPicker","handleCountryChange","useState","setCountries","useEffect","fetchCountries","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","value","App","state","latestData","timeSeriesData","fetchedTotalData","fetchedTimeSeries","setState","this","style","paddingTop","React","Component","ReactDOM","render","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.34a7863b.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Card, CardContent, Typography, Grid } from \"@material-ui/core\";\r\nimport CountUp from \"react-countup\";\r\nimport cx from \"classnames\";\r\n\r\nimport styles from \"./Cards.module.css\";\r\n\r\nconst Cards = ({ data: { confirmed, recovered, deaths, lastUpdate }, timeSeries }) => {\r\n  const lastData = timeSeries[timeSeries.length - 1];\r\n  const secondLast = timeSeries[timeSeries.length - 2];\r\n\r\n  const displayData = {\r\n    confirmed,\r\n    recovered,\r\n    deaths,\r\n    lastUpdate\r\n  };\r\n\r\n  const deltaData = {\r\n    confirmed,\r\n    recovered,\r\n    deaths\r\n  };\r\n\r\n  if (!confirmed) {\r\n    displayData.confirmed = 0;\r\n    displayData.recovered = 0;\r\n    displayData.deaths = 0;\r\n    displayData.lastUpdate = new Date().toDateString();\r\n\r\n    deltaData.confirmed = 0;\r\n    deltaData.recovered = 0;\r\n    deltaData.deaths = 0;\r\n  } else {\r\n    displayData.confirmed = lastData.confirmed;\r\n    displayData.recovered = lastData.recovered;\r\n    displayData.deaths = lastData.deaths;\r\n    displayData.lastUpdate = new Date(`${lastData.date}T12:00:00+00:00`).toDateString();\r\n    deltaData.confirmed = displayData.confirmed - secondLast.confirmed;\r\n    deltaData.recovered = displayData.recovered - secondLast.recovered;\r\n    deltaData.deaths = displayData.deaths - secondLast.deaths;\r\n  }\r\n\r\n  return (\r\n    <div className={styles.container}>\r\n      <Grid container justify=\"center\">\r\n        <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.infected)}>\r\n          <CardContent>\r\n            <Typography color=\"textSecondary\" gutterBottom>\r\n              Infected\r\n            </Typography>\r\n            <div className={styles.counter}>\r\n              <Typography variant=\"h5\">\r\n                <CountUp start={0} end={displayData.confirmed} duration={0.5} separator=\",\" />\r\n              </Typography>\r\n              <Typography variant=\"subtitle1\" className={styles.confirmedDelta}>\r\n                +<CountUp start={0} end={deltaData.confirmed} duration={0.5} separator=\",\" />\r\n              </Typography>\r\n            </div>\r\n            <Typography color=\"textSecondary\">Updated: {displayData.lastUpdate}</Typography>\r\n            {/* <Typography variant=\"body2\" styles={\"color: rgb(0,255,0)\"}>\r\n              Number of total COVID-19 cases\r\n            </Typography> */}\r\n          </CardContent>\r\n        </Grid>\r\n        <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.recovered)}>\r\n          <CardContent>\r\n            <Typography color=\"textSecondary\" gutterBottom>\r\n              Recovered\r\n            </Typography>\r\n            <div className={styles.counter}>\r\n              <Typography variant=\"h5\">\r\n                <CountUp start={0} end={displayData.recovered} duration={0.5} separator=\",\" />\r\n              </Typography>\r\n              <Typography variant=\"subtitle1\" className={styles.recoveredDelta}>\r\n                +<CountUp start={0} end={deltaData.recovered} duration={0.5} separator=\",\" />\r\n              </Typography>\r\n            </div>\r\n            <Typography color=\"textSecondary\">Updated: {displayData.lastUpdate}</Typography>\r\n          </CardContent>\r\n        </Grid>\r\n        <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.deaths)}>\r\n          <CardContent>\r\n            <Typography color=\"textSecondary\" gutterBottom>\r\n              Deaths\r\n            </Typography>\r\n            <div className={styles.counter}>\r\n              <Typography variant=\"h5\">\r\n                <CountUp start={0} end={displayData.deaths} duration={0.5} separator=\",\" />\r\n              </Typography>\r\n              <Typography variant=\"subtitle1\" className={styles.deathsDelta}>\r\n                +<CountUp start={0} end={deltaData.deaths} duration={0.5} separator=\",\" />\r\n              </Typography>\r\n            </div>\r\n            <Typography color=\"textSecondary\">Updated: {displayData.lastUpdate}</Typography>\r\n          </CardContent>\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Cards;\r\n","import React from \"react\";\r\n\r\nimport { Line, Bar } from \"react-chartjs-2\";\r\n\r\nimport styles from \"./Chart.module.css\";\r\n\r\nconst Chart = ({ data, country }) => {\r\n  const dailyData = data;\r\n\r\n  const lineChart = dailyData.length ? (\r\n    <Line\r\n      data={{\r\n        labels: dailyData.map(({ date }) => date),\r\n        datasets: [\r\n          {\r\n            data: dailyData.map(({ confirmed }) => confirmed),\r\n            label: \"Infected\",\r\n            borderColor: \"#3333ff\",\r\n            fill: true,\r\n          },\r\n          {\r\n            data: dailyData.map(({ recovered }) => recovered),\r\n            label: \"Recovered\",\r\n            borderColor: \"green\",\r\n            backgroundColor: \"rgba(0, 255, 0, 0.5)\",\r\n            fill: true,\r\n          },\r\n          {\r\n            data: dailyData.map(({ deaths }) => deaths),\r\n            label: \"Deaths\",\r\n            borderColor: \"red\",\r\n            backgroundColor: \"rgba(255, 0, 0, 0.5)\",\r\n            fill: true,\r\n          },\r\n        ],\r\n      }}\r\n    />\r\n  ) : null;\r\n\r\n  const barChart = data.confirmed ? (\r\n    <Bar\r\n      data={{\r\n        labels: [\"Infected\", \"Recovered\", \"Deaths\"],\r\n        datasets: [\r\n          {\r\n            label: \"People\",\r\n            backgroundColor: [\"rgba(0, 0, 255, 0.5)\", \"rgba(0, 255, 0, 0.5)\", \"rgba(255, 0, 0, 0.5)\"],\r\n            data: [data.confirmed, data.recovered, data.deaths],\r\n          },\r\n        ],\r\n      }}\r\n      options={{\r\n        legend: { display: false, title: { display: true, text: `Current State in ${country}` } },\r\n      }}\r\n    />\r\n  ) : null;\r\n\r\n  return <div className={styles.container}>{lineChart}</div>;\r\n};\r\n\r\nexport default Chart;\r\n","import axios from \"axios\";\r\n\r\nconst globalUrl = \"https://covidapi.info/api/v1/global\";\r\nconst countryUrl = \"https://covidapi.info/api/v1\";\r\n\r\nexport const fetchTotalData = async (country) => {\r\n  if (country) {\r\n    // Download individual country data\r\n    try {\r\n      const {\r\n        data: { result }\r\n      } = await axios.get(`${countryUrl}/country/${country}/latest`);\r\n\r\n      const lastUpdate = Object.keys(result)[0];\r\n      const { confirmed, deaths, recovered } = result[lastUpdate];\r\n\r\n      return { confirmed, recovered, deaths, lastUpdate };\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  } else {\r\n    try {\r\n      //download global total data from API\r\n      const {\r\n        data: {\r\n          date,\r\n          result: { confirmed, deaths, recovered }\r\n        }\r\n      } = await axios.get(globalUrl);\r\n      const lastUpdate = date;\r\n\r\n      return { confirmed, recovered, deaths, lastUpdate };\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n};\r\n\r\nexport const fetchDailyData = async (country) => {\r\n  try {\r\n    let fetchURL;\r\n\r\n    if (country) {\r\n      fetchURL = `${countryUrl}/country/${country}`;\r\n    } else {\r\n      fetchURL = `${globalUrl}/count`;\r\n    }\r\n    const {\r\n      data: { result }\r\n    } = await axios.get(fetchURL);\r\n\r\n    const modifiedData = Object.keys(result).map(function (key, index) {\r\n      const { confirmed, deaths, recovered } = result[key];\r\n      return confirmed ? { confirmed, deaths, recovered, date: key } : null;\r\n    });\r\n\r\n    return modifiedData.filter((data) => data);\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const fetchCountryData = async () => {\r\n  try {\r\n    const {\r\n      data: { countries }\r\n    } = await axios.get(\"https://covid19.mathdro.id/api/countries\");\r\n\r\n    const modifiedData = countries.map((country) => {\r\n      return { country: country.name, iso: country.iso3 };\r\n    });\r\n\r\n    return modifiedData;\r\n  } catch (error) {}\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { FormControl, NativeSelect } from \"@material-ui/core\";\r\n\r\nimport { fetchCountryData } from \"../../api\";\r\nimport styles from \"./CountryPicker.module.css\";\r\n\r\nconst CountryPicker = ({ handleCountryChange }) => {\r\n  const [countries, setCountries] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchCountries = async () => {\r\n      setCountries(await fetchCountryData());\r\n    };\r\n\r\n    fetchCountries();\r\n  }, []);\r\n\r\n  return (\r\n    <FormControl className={styles.formControl}>\r\n      <NativeSelect defaultValue=\"\" onChange={(e) => handleCountryChange(e.target.value)}>\r\n        <option value=\"\">Global</option>\r\n        {countries\r\n          ? countries.map((country) => (\r\n              <option key={country.country} value={country.iso}>\r\n                {country.country}\r\n              </option>\r\n            ))\r\n          : null}\r\n      </NativeSelect>\r\n    </FormControl>\r\n  );\r\n};\r\n\r\nexport default CountryPicker;\r\n","import React from \"react\";\r\n\r\nimport { Cards, Chart, CountryPicker } from \"./components\";\r\nimport styles from \"./App.module.css\";\r\nimport { fetchTotalData, fetchDailyData } from \"./api\";\r\n\r\nclass App extends React.Component {\r\n  state = {\r\n    latestData: {},\r\n    timeSeriesData: [],\r\n    country: \"\"\r\n  };\r\n\r\n  async componentDidMount() {\r\n    const fetchedTotalData = await fetchTotalData();\r\n    const fetchedTimeSeries = await fetchDailyData(this.state.country);\r\n    this.setState({ latestData: fetchedTotalData, timeSeriesData: fetchedTimeSeries });\r\n  }\r\n\r\n  handleCountryChange = async (country) => {\r\n    const fetchedTotalData = await fetchTotalData(country);\r\n    const fetchedTimeSeries = await fetchDailyData(country);\r\n    this.setState({ latestData: fetchedTotalData, country: country, timeSeriesData: fetchedTimeSeries });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className={styles.container}>\r\n        <Cards data={this.state.latestData} timeSeries={this.state.timeSeriesData} />\r\n        <CountryPicker handleCountryChange={this.handleCountryChange} />\r\n        <Chart data={this.state.timeSeriesData} country={this.state.country} />\r\n        <div style={{ paddingTop: 20 }}>Source: Johns Hopkins University, Center for Systems Science and Engineering (via covidapi.info)</div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__3b3I5\",\"card\":\"Cards_card__3LkJT\",\"infected\":\"Cards_infected__MaZs5\",\"recovered\":\"Cards_recovered__2EChl\",\"deaths\":\"Cards_deaths__guyns\",\"counter\":\"Cards_counter__1dl8E\",\"confirmedDelta\":\"Cards_confirmedDelta__3Mvqg\",\"recoveredDelta\":\"Cards_recoveredDelta__10T_e\",\"deathsDelta\":\"Cards_deathsDelta__2DGH5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__31DQU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__2XUGd\"};"],"sourceRoot":""}