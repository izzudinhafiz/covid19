{"version":3,"sources":["components/CountryPicker/CountryPicker.module.css","components/Chart/Chart.module.css","App.module.css","components/Cards/Cards.module.css","components/Cards/Cards.jsx","components/Chart/Chart.jsx","api/index.js","components/CountryPicker/CountryPicker.jsx","App.js","index.js"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","timeSeries","lastData","length","secondLast","displayData","deltaData","Date","date","toDateString","className","styles","container","Grid","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","counter","variant","start","end","duration","separator","confirmedDelta","recoveredDelta","deathsDelta","Chart","props","chartRef","React","createRef","state","windowWidth","window","innerWidth","addEventListener","setState","dailyData","this","myChart","Chartjs","current","type","labels","map","datasets","label","borderColor","fill","backgroundColor","options","maintainAspectRatio","scales","xAxes","ticks","fontSize","time","displayFormats","day","stepSize","yAxes","callback","value","index","values","order","Math","floor","log","unitName","update","id","ref","Component","globalUrl","fetchTotalData","country","a","axios","get","result","Object","keys","console","fetchDailyData","fetchURL","modifiedData","key","filter","fetchCountryData","iso3","searchString","forEach","concat","countries","name","alpha3Code","iso2","alpha2Code","element","indexOf","split","sort","b","fetchLocation","CountryPicker","handleCountryChange","useState","setCountries","useEffect","fetchCountries","handleClick","selectElement","document","getElementById","buttonElement","innerText","countryClick","spacing","gridContainer","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","handleSelect","Button","size","disableElevation","onClick","buttonLocation","App","latestData","timeSeriesData","fetchedTotalData","fetchedTimeSeries","style","paddingTop","textAlign","ReactDOM","render"],"mappings":"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","file":"static/js/main.c7947d0c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"gridContainer\":\"CountryPicker_gridContainer__3GS8J\",\"buttonLocation\":\"CountryPicker_buttonLocation__22lws\",\"formControl\":\"CountryPicker_formControl__26lxt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__31DQU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__2XUGd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__3b3I5\",\"card\":\"Cards_card__3LkJT\",\"infected\":\"Cards_infected__MaZs5\",\"recovered\":\"Cards_recovered__2EChl\",\"deaths\":\"Cards_deaths__guyns\",\"counter\":\"Cards_counter__1dl8E\",\"confirmedDelta\":\"Cards_confirmedDelta__3Mvqg\",\"recoveredDelta\":\"Cards_recoveredDelta__10T_e\",\"deathsDelta\":\"Cards_deathsDelta__2DGH5\"};","import React from \"react\";\r\nimport { Card, CardContent, Typography, Grid } from \"@material-ui/core\";\r\nimport CountUp from \"react-countup\";\r\nimport cx from \"classnames\";\r\n\r\nimport styles from \"./Cards.module.css\";\r\n\r\nconst Cards = ({ data: { confirmed, recovered, deaths, lastUpdate }, timeSeries }) => {\r\n  const lastData = timeSeries[timeSeries.length - 1];\r\n  const secondLast = timeSeries[timeSeries.length - 2];\r\n\r\n  const displayData = {\r\n    confirmed,\r\n    recovered,\r\n    deaths,\r\n    lastUpdate\r\n  };\r\n\r\n  const deltaData = {\r\n    confirmed,\r\n    recovered,\r\n    deaths\r\n  };\r\n\r\n  if (!confirmed) {\r\n    displayData.confirmed = 0;\r\n    displayData.recovered = 0;\r\n    displayData.deaths = 0;\r\n    displayData.lastUpdate = new Date().toDateString();\r\n\r\n    deltaData.confirmed = 0;\r\n    deltaData.recovered = 0;\r\n    deltaData.deaths = 0;\r\n  } else {\r\n    displayData.confirmed = lastData.confirmed;\r\n    displayData.recovered = lastData.recovered;\r\n    displayData.deaths = lastData.deaths;\r\n    displayData.lastUpdate = new Date(`${lastData.date}T12:00:00+00:00`).toDateString();\r\n    deltaData.confirmed = displayData.confirmed - secondLast.confirmed;\r\n    deltaData.recovered = displayData.recovered - secondLast.recovered;\r\n    deltaData.deaths = displayData.deaths - secondLast.deaths;\r\n  }\r\n\r\n  return (\r\n    <div className={styles.container}>\r\n      <Grid container justify=\"center\">\r\n        <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.infected)}>\r\n          <CardContent>\r\n            <Typography color=\"textSecondary\" gutterBottom>\r\n              Infected\r\n            </Typography>\r\n            <div className={styles.counter}>\r\n              <Typography variant=\"h5\">\r\n                <CountUp start={0} end={displayData.confirmed} duration={0.5} separator=\",\" />\r\n              </Typography>\r\n              <Typography variant=\"subtitle1\" className={styles.confirmedDelta}>\r\n                +<CountUp start={0} end={deltaData.confirmed} duration={0.5} separator=\",\" />\r\n              </Typography>\r\n            </div>\r\n            <Typography color=\"textSecondary\">Updated: {displayData.lastUpdate}</Typography>\r\n            {/* <Typography variant=\"body2\" styles={\"color: rgb(0,255,0)\"}>\r\n              Number of total COVID-19 cases\r\n            </Typography> */}\r\n          </CardContent>\r\n        </Grid>\r\n        <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.recovered)}>\r\n          <CardContent>\r\n            <Typography color=\"textSecondary\" gutterBottom>\r\n              Recovered\r\n            </Typography>\r\n            <div className={styles.counter}>\r\n              <Typography variant=\"h5\">\r\n                <CountUp start={0} end={displayData.recovered} duration={0.5} separator=\",\" />\r\n              </Typography>\r\n              <Typography variant=\"subtitle1\" className={styles.recoveredDelta}>\r\n                +<CountUp start={0} end={deltaData.recovered} duration={0.5} separator=\",\" />\r\n              </Typography>\r\n            </div>\r\n            <Typography color=\"textSecondary\">Updated: {displayData.lastUpdate}</Typography>\r\n          </CardContent>\r\n        </Grid>\r\n        <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.deaths)}>\r\n          <CardContent>\r\n            <Typography color=\"textSecondary\" gutterBottom>\r\n              Deaths\r\n            </Typography>\r\n            <div className={styles.counter}>\r\n              <Typography variant=\"h5\">\r\n                <CountUp start={0} end={displayData.deaths} duration={0.5} separator=\",\" />\r\n              </Typography>\r\n              <Typography variant=\"subtitle1\" className={styles.deathsDelta}>\r\n                +<CountUp start={0} end={deltaData.deaths} duration={0.5} separator=\",\" />\r\n              </Typography>\r\n            </div>\r\n            <Typography color=\"textSecondary\">Updated: {displayData.lastUpdate}</Typography>\r\n          </CardContent>\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Cards;\r\n","import React from \"react\";\r\nimport { Chart as Chartjs } from \"chart.js\";\r\n\r\nimport styles from \"./Chart.module.css\";\r\n\r\nclass Chart extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      windowWidth: window.innerWidth\r\n    };\r\n  }\r\n\r\n  chartRef = React.createRef();\r\n\r\n  componentDidMount() {\r\n    window.addEventListener(\"resize\", () => {\r\n      this.setState({ windowWidth: window.innerWidth });\r\n    });\r\n    const dailyData = this.props.data;\r\n\r\n    this.myChart = new Chartjs(this.chartRef.current, {\r\n      type: \"line\",\r\n      data: {\r\n        labels: dailyData.map(({ date }) => {\r\n          return new Date();\r\n        }),\r\n        datasets: [\r\n          {\r\n            data: dailyData.map(({ confirmed }) => confirmed),\r\n            label: \"Infected\",\r\n            borderColor: \"#3333ff\",\r\n            fill: true\r\n          },\r\n          {\r\n            data: dailyData.map(({ recovered }) => recovered),\r\n            label: \"Recovered\",\r\n            borderColor: \"green\",\r\n            backgroundColor: \"rgba(0, 255, 0, 0.5)\",\r\n            fill: true\r\n          },\r\n          {\r\n            data: dailyData.map(({ deaths }) => deaths),\r\n            label: \"Deaths\",\r\n            borderColor: \"red\",\r\n            backgroundColor: \"rgba(255, 0, 0, 0.5)\",\r\n            fill: true\r\n          }\r\n        ]\r\n      },\r\n      options: {\r\n        maintainAspectRatio: this.state.windowWidth <= 500 ? false : true,\r\n        scales: {\r\n          xAxes: [\r\n            {\r\n              ticks: { fontSize: this.state.windowWidth <= 500 ? 10 : 12 },\r\n              type: \"time\",\r\n              time: {\r\n                displayFormats: {\r\n                  day: \"MMM DD\"\r\n                },\r\n                stepSize: this.state.windowWidth <= 500 ? 14 : 7\r\n              }\r\n            }\r\n          ],\r\n          yAxes: [\r\n            {\r\n              ticks: {\r\n                callback: (value, index, values) => {\r\n                  const units = [\"k\", \"M\", \"B\", \"T\"];\r\n                  const order = Math.floor(Math.log(values[0]) / Math.log(1000));\r\n\r\n                  if (order > 0) {\r\n                    const unitName = units[order - 1];\r\n                    return value / 1000 ** order + unitName;\r\n                  } else {\r\n                    return value;\r\n                  }\r\n                },\r\n                fontSize: this.state.windowWidth <= 500 ? 10 : 12\r\n              }\r\n            }\r\n          ]\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    const dailyData = this.props.data;\r\n    this.myChart.data.labels = dailyData.map(({ date }) => {\r\n      return new Date(date);\r\n    });\r\n    this.myChart.data.datasets[0].data = dailyData.map(({ confirmed }) => confirmed);\r\n    this.myChart.data.datasets[1].data = dailyData.map(({ recovered }) => recovered);\r\n    this.myChart.data.datasets[2].data = dailyData.map(({ deaths }) => deaths);\r\n\r\n    if (this.state.windowWidth <= 500) {\r\n      this.myChart.options.scales.yAxes[0].ticks.fontSize = 10;\r\n      this.myChart.options.maintainAspectRatio = false;\r\n      this.myChart.options.scales.xAxes[0].time.stepSize = 14;\r\n    } else {\r\n      this.myChart.options.scales.yAxes[0].ticks.fontSize = 12;\r\n      this.myChart.options.maintainAspectRatio = true;\r\n      this.myChart.options.scales.xAxes[0].time.stepSize = 7;\r\n    }\r\n    this.myChart.update();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className={styles.container}>\r\n        <canvas id=\"myChart\" ref={this.chartRef}></canvas>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Chart;\r\n","import axios from \"axios\";\r\n\r\nconst globalUrl = \"https://covidapi.info/api/v1/global\";\r\nconst countryUrl = \"https://covidapi.info/api/v1\";\r\n\r\nexport const fetchTotalData = async (country) => {\r\n  if (country) {\r\n    // Download individual country data\r\n    try {\r\n      const {\r\n        data: { result }\r\n      } = await axios.get(`${countryUrl}/country/${country}/latest`);\r\n\r\n      const lastUpdate = Object.keys(result)[0];\r\n      const { confirmed, deaths, recovered } = result[lastUpdate];\r\n\r\n      return { confirmed, recovered, deaths, lastUpdate };\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  } else {\r\n    //download global total data from API\r\n    try {\r\n      const {\r\n        data: {\r\n          date,\r\n          result: { confirmed, deaths, recovered }\r\n        }\r\n      } = await axios.get(globalUrl);\r\n      const lastUpdate = date;\r\n\r\n      return { confirmed, recovered, deaths, lastUpdate };\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n};\r\n\r\nexport const fetchDailyData = async (country) => {\r\n  try {\r\n    let fetchURL;\r\n\r\n    if (country) {\r\n      fetchURL = `${countryUrl}/country/${country}`;\r\n    } else {\r\n      fetchURL = `${globalUrl}/count`;\r\n    }\r\n    const {\r\n      data: { result }\r\n    } = await axios.get(fetchURL);\r\n\r\n    const modifiedData = Object.keys(result).map(function (key, index) {\r\n      const { confirmed, deaths, recovered } = result[key];\r\n      return confirmed ? { confirmed, deaths, recovered, date: key } : null;\r\n    });\r\n\r\n    return modifiedData.filter((data) => data);\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const fetchCountryData = async () => {\r\n  try {\r\n    const {\r\n      data: { result }\r\n    } = await axios.get(`${globalUrl}/latest`);\r\n    const iso3 = result.map((result) => Object.keys(result)[0]);\r\n\r\n    let searchString = \"https://restcountries.eu/rest/v2/alpha?codes=\";\r\n    iso3.forEach((country) => {\r\n      searchString = searchString.concat(country, \";\");\r\n    });\r\n\r\n    let { data: countries } = await axios.get(searchString);\r\n    countries = countries.filter((country) => country);\r\n\r\n    const modifiedData = countries.map((country) => {\r\n      return { name: country.name, iso3: country.alpha3Code, iso2: country.alpha2Code };\r\n    });\r\n\r\n    for (let index = 0; index < modifiedData.length; index++) {\r\n      const element = modifiedData[index];\r\n\r\n      if (element.name.indexOf(\"(\") > 0) {\r\n        element.name = element.name.split(\"(\")[0];\r\n      }\r\n\r\n      if (element.name.indexOf(\" and \") > 0) {\r\n        element.name = element.name.split(\" and \")[0];\r\n      }\r\n\r\n      if (element.name.indexOf(\",\") > 0) {\r\n        element.name = element.name.split(\",\")[0];\r\n      }\r\n\r\n      if (element.iso3 === \"GBR\") {\r\n        element.name = \"United Kingdom\";\r\n      } else if (element.iso3 === \"VNM\") {\r\n        element.name = \"Vietnam\";\r\n      } else if (element.iso3 === \"KOR\") {\r\n        element.name = \"South Korea\";\r\n      } else if (element.iso3 === \"LAO\") {\r\n        element.name = \"Laos\";\r\n      }\r\n    }\r\n\r\n    return modifiedData.sort((a, b) => (a.name > b.name ? 1 : -1));\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const fetchLocation = async () => {\r\n  try {\r\n    const {\r\n      data: { country }\r\n    } = await axios.get(\"https://ipinfo.io?token=b092506d1e5aeb\");\r\n    return country;\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { FormControl, NativeSelect, Grid, Button } from \"@material-ui/core\";\r\n\r\nimport { fetchCountryData, fetchLocation } from \"../../api\";\r\nimport styles from \"./CountryPicker.module.css\";\r\n\r\nconst CountryPicker = ({ handleCountryChange }) => {\r\n  const [countries, setCountries] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchCountries = async () => {\r\n      setCountries(await fetchCountryData());\r\n    };\r\n\r\n    fetchCountries();\r\n  }, []);\r\n\r\n  const handleClick = async () => {\r\n    const selectElement = document.getElementById(\"country-select\");\r\n    const buttonElement = document.getElementById(\"button-location\");\r\n\r\n    if (buttonElement.innerText !== \"GLOBAL\") {\r\n      const countryClick = await fetchLocation();\r\n      const index = countries.map((country) => country.iso2).indexOf(countryClick);\r\n      if (index !== -1) {\r\n        selectElement.value = countries[index].iso3;\r\n        buttonElement.innerText = \"Global\";\r\n      }\r\n    } else {\r\n      buttonElement.innerText = \"My Country\";\r\n      selectElement.value = \"\";\r\n    }\r\n\r\n    handleCountryChange(selectElement.value);\r\n  };\r\n\r\n  const handleSelect = (element) => {\r\n    const buttonElement = document.getElementById(\"button-location\");\r\n    handleCountryChange(element.target.value);\r\n\r\n    if (element.target.value !== \"\" && buttonElement.innerText !== \"GLOBAL\") {\r\n      buttonElement.innerText = \"Global\";\r\n    } else {\r\n      buttonElement.innerText = \"My Country\";\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Grid container spacing={1} className={styles.gridContainer}>\r\n      <Grid item>\r\n        <FormControl className={styles.formControl}>\r\n          <NativeSelect\r\n            id=\"country-select\"\r\n            defaultValue=\"\"\r\n            onChange={(e) => {\r\n              handleSelect(e);\r\n            }}\r\n          >\r\n            <option value=\"\">Global</option>\r\n            {countries\r\n              ? countries.map((country) => (\r\n                  <option key={country.name} value={country.iso3}>\r\n                    {country.name}\r\n                  </option>\r\n                ))\r\n              : null}\r\n          </NativeSelect>\r\n        </FormControl>\r\n      </Grid>\r\n      <Grid item>\r\n        <Button id=\"button-location\" variant=\"contained\" size=\"small\" disableElevation color=\"primary\" onClick={handleClick} className={styles.buttonLocation}>\r\n          My Country\r\n        </Button>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default CountryPicker;\r\n","import React from \"react\";\r\n\r\nimport { Cards, Chart, CountryPicker } from \"./components\";\r\nimport styles from \"./App.module.css\";\r\nimport { fetchTotalData, fetchDailyData, fetchLocation } from \"./api\";\r\n\r\nclass App extends React.Component {\r\n  state = {\r\n    latestData: {},\r\n    timeSeriesData: [],\r\n    country: \"\"\r\n  };\r\n\r\n  async componentDidMount() {\r\n    const fetchedTotalData = await fetchTotalData();\r\n    const fetchedTimeSeries = await fetchDailyData(this.state.country);\r\n    this.setState({ latestData: fetchedTotalData, timeSeriesData: fetchedTimeSeries });\r\n    fetchLocation();\r\n  }\r\n\r\n  handleCountryChange = async (country) => {\r\n    const fetchedTotalData = await fetchTotalData(country);\r\n    const fetchedTimeSeries = await fetchDailyData(country);\r\n    this.setState({ latestData: fetchedTotalData, country: country, timeSeriesData: fetchedTimeSeries });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className={styles.container}>\r\n        <Cards data={this.state.latestData} timeSeries={this.state.timeSeriesData} />\r\n        <CountryPicker handleCountryChange={this.handleCountryChange} />\r\n        <Chart data={this.state.timeSeriesData} country={this.state.country} />\r\n        <div style={{ paddingTop: 20, textAlign: \"center\" }}>\r\n          Source: Johns Hopkins University, Center for Systems Science and Engineering (via covidapi.info)\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}